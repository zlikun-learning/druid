<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<context:annotation-config />
	<context:component-scan base-package="com.zlikun.learning" />

	<!-- https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="jdbc:h2:mem:default;MODE=MySQL" />
		<property name="username" value="sa" />
		<property name="password" value="" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="5" />
		<property name="minIdle" value="5" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'X'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小，主要针对Oracle使用，MySQL时应关闭 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

		<!-- 配置过滤器，可以多个同时配置，关系为组合关系(同时生效) -->
		<!-- wall用于防止SQL注入，slf4j用于配置日志提供者 -->
		<!-- https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE-wallfilter -->
		<!-- https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_LogFilter -->
		<!-- <property name="filters" value="wall,stat,slf4j" /> -->
		<property name="filters" value="wall,slf4j" />
		<!-- proxyFilters与filters是组合关系，而非替代关系，下面配置代替：stat -->
		<property name="proxyFilters">
			<list>
				<!-- 配置_StatFilter，Druid内置提供一个StatFilter，用于统计监控信息 -->
				<!-- https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter -->
				<bean class="com.alibaba.druid.filter.stat.StatFilter">
					<!-- 监控慢查询，慢查询过滤条件为执行时间超过5秒(这里单位毫秒，默认：3000)的SQL -->
					<property name="slowSqlMillis" value="5000" />
					<property name="logSlowSql" value="true" />
					<!-- 合并SQL，当程序中未使用参数化SQL时，相同模板SQL无法计为同一SQL，配置该参数会将相同模板SQL转换为参数化SQL统计 -->
					<!-- https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter#4-sql%E5%90%88%E5%B9%B6%E9%85%8D%E7%BD%AE -->
					<property name="mergeSql" value="true" />
				</bean>
			</list>
		</property>

		<!-- 监控连接是否泄漏，生产环境应关闭，对性能有影响 -->
		<!-- https://github.com/alibaba/druid/wiki/%E8%BF%9E%E6%8E%A5%E6%B3%84%E6%BC%8F%E7%9B%91%E6%B5%8B -->
	    <!-- 打开removeAbandoned功能，在datasource.html中查看ActiveConnection StackTrace属性，可以看到未关闭连接堆栈信息 -->
	    <property name="removeAbandoned" value="true" />
	    <!-- 1800秒，也就是30分钟，如果连接超过30分钟未关闭，就会被强行回收，并且日志记录连接申请时的调用堆栈 -->
	    <property name="removeAbandonedTimeout" value="1800" />
	    <!-- 关闭abanded连接时输出错误日志 -->
	    <property name="logAbandoned" value="true" />
	</bean>

	<jdbc:initialize-database data-source="dataSource">
		<jdbc:script location="classpath:scripts/schema.sql"/>
		<jdbc:script location="classpath:scripts/data.sql"/>
	</jdbc:initialize-database>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven />

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

</beans>